import java.io.*;
import java.util.*;
import java.util.Map.Entry;

public class lab1_1 {
	public static void main(String []args) {
		
		int[] numb1 = new int[33];
		int[] numb2 = new int[33];
		
		char[] alph1 = new char[33];
		char[] alph2 = new char[33];
		int c;
		char alphabet[] = {'à', 'á', 'â', 'ã', 'ä', 'å', '¸', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', '÷', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'þ', 'ÿ','à', 'á'};
		
		ArrayList<String> alphabet2 = new ArrayList<String>();
		alphabet2.add("à");
		alphabet2.add("á");
		alphabet2.add("â");
		alphabet2.add("ã");
		alphabet2.add("ä");
		alphabet2.add("å");
		alphabet2.add("¸");
		alphabet2.add("æ");
		alphabet2.add("ç");
		alphabet2.add("è");
		alphabet2.add("é");
		alphabet2.add("ê");
		alphabet2.add("ë");
		alphabet2.add("ì");
		alphabet2.add("í");
		alphabet2.add("î");
		alphabet2.add("ï");
		alphabet2.add("ð");
		alphabet2.add("ñ");
		alphabet2.add("ò");
		alphabet2.add("ó");
		alphabet2.add("ô");
		alphabet2.add("õ");
		alphabet2.add("ö");
		alphabet2.add("÷");
		alphabet2.add("ø");
		alphabet2.add("ù");
		alphabet2.add("ú");
		alphabet2.add("û");
		alphabet2.add("ü");
		alphabet2.add("ý");
		alphabet2.add("þ");
		alphabet2.add("ÿ");
		
		
		int[] arr_big1 = new int[1089];
		int[] arr_big2 = new int[1089];
		
		String[] bgm1 = new String[20];
		String[] bgm2 = new String[20];
		
		Map<Character, Integer> tabble = new LinkedHashMap<Character, Integer>();
        tabble.put('à', 0);
        tabble.put('á', 0);
        tabble.put('â', 0);
        tabble.put('ã', 0);
        tabble.put('ä', 0);
        tabble.put('å', 0);
        tabble.put('¸', 0);
        tabble.put('æ', 0);
        tabble.put('ç', 0);
        tabble.put('è', 0);
        tabble.put('é', 0);
        tabble.put('ê', 0);
        tabble.put('ë', 0);
        tabble.put('ì', 0);
        tabble.put('í', 0);
        tabble.put('î', 0);
        tabble.put('ï', 0);
        tabble.put('ð', 0);
        tabble.put('ñ', 0);
        tabble.put('ò', 0);
        tabble.put('ó', 0);
        tabble.put('ô', 0);
        tabble.put('õ', 0);
        tabble.put('ö', 0);
        tabble.put('÷', 0);
        tabble.put('ø', 0);
        tabble.put('ù', 0);
        tabble.put('ú', 0);
        tabble.put('û', 0);
        tabble.put('ü', 0);
        tabble.put('ý', 0);
        tabble.put('þ', 0);
        tabble.put('ÿ', 0);
		
        Map<String, Integer> big1 = new LinkedHashMap<String, Integer>();
        bigmap(big1);
        Map<String, Integer> big2 = new LinkedHashMap<String, Integer>();
        bigmap(big2);
        Map<Integer, String> big3 = new LinkedHashMap<Integer, String>();
        
		try(FileReader reader = new FileReader("book.txt"))
        {
            char symb;
            
            while((c=reader.read())!=-1){
            	symb = (char)c;
            	switch (Character.toLowerCase(symb)) {
            	case 'à':
            		tabble.replace('à',tabble.get('à')+1);
            		break;
            	case 'á':
            		tabble.replace('á',tabble.get('á')+1);
            		break;
            	case 'â':
            		tabble.replace('â', tabble.get('â')+1);
            		break;
            	case 'ã':
            		tabble.replace('ã', tabble.get('ã')+1);
            		break;
            	case 'ä':
            		tabble.replace('ä', tabble.get('ä')+1);
            		break;
            	case 'å':
            		tabble.replace('å', tabble.get('å')+1);
            		break;
            	case '¸':
            		tabble.replace('¸', tabble.get('¸')+1);
            		break;
            	case 'æ':
            		tabble.replace('æ', tabble.get('æ')+1);
            		break;
            	case 'ç':
            		tabble.replace('ç', tabble.get('ç')+1);
            		break;
            	case 'è':
            		tabble.replace('è', tabble.get('è')+1);
            		break;
            	case 'é':
            		tabble.replace('é', tabble.get('é')+1);
            		break;
            	case 'ê':
            		tabble.replace('ê', tabble.get('ê')+1);
            		break;
            	case 'ë':
            		tabble.replace('ë', tabble.get('ë')+1);
            		break;
            	case 'ì':
            		tabble.replace('ì', tabble.get('ì')+1);
            		break;
            	case 'í':
            		tabble.replace('í', tabble.get('í')+1);
            		break;
            	case 'î':
            		tabble.replace('î', tabble.get('î')+1);
            		break;
            	case 'ï':
            		tabble.replace('ï', tabble.get('ï')+1);
            		break;
            	case 'ð':
            		tabble.replace('ð', tabble.get('ð')+1);
            		break;
            	case 'ñ':
            		tabble.replace('ñ', tabble.get('ñ')+1);
            		break;
            	case 'ò':
            		tabble.replace('ò', tabble.get('ò')+1);
            		break;
            	case 'ó':
            		tabble.replace('ó', tabble.get('ó')+1);
            		break;
            	case 'ô':
            		tabble.replace('ô', tabble.get('ô')+1);
            		break;
            	case 'õ':
            		tabble.replace('õ', tabble.get('õ')+1);
            		break;
            	case 'ö':
            		tabble.replace('ö', tabble.get('ö')+1);
            		break;
            	case '÷':
            		tabble.replace('÷', tabble.get('÷')+1);
            		break;
            	case 'ø':
            		tabble.replace('ø', tabble.get('ø')+1);
            		break;
            	case 'ù':
            		tabble.replace('ù', tabble.get('ù')+1);
            		break;
            	case 'ú':
            		tabble.replace('ú', tabble.get('ú')+1);
            		break;
            	case 'û':
            		tabble.replace('û', tabble.get('û')+1);
            		break;
            	case 'ü':
            		tabble.replace('ü', tabble.get('ü')+1);
            		break;
            	case 'ý':
            		tabble.replace('ý', tabble.get('ý')+1);
            		break;
            	case 'þ':
            		tabble.replace('þ', tabble.get('þ')+1);
            		break;
            	case 'ÿ':
            		tabble.replace('ÿ', tabble.get('ÿ')+1);
            		break;
            	default:
            		break;
            	}
            }
            
            for(Map.Entry<Character, Integer> item : tabble.entrySet()){
                
            	System.out.print(item.getKey());
            	System.out.print("=");
            	System.out.print(item.getValue());
            	System.out.print("  ");
            }
        }
        catch(IOException ex){
            System.out.println(ex.getMessage());
        }
		
		
		
		try(FileReader reader = new FileReader("chapter.txt");
				FileWriter writer = new FileWriter("code.txt");)
        {
			int x;
			char symb;
			while((x=reader.read())!=-1){
				symb = (char)x;
				for(int i = 0;i<=alphabet.length-3;i++) {
	                if (Character.toLowerCase(symb) == alphabet[i]) {
	                	x = alphabet[i+2];
	                }
	            }
				writer.write(x);
			}
        }
		catch(IOException ex){
            System.out.println(ex.getMessage());
        }
		
		Map<Character, Integer> tabble2 = new LinkedHashMap<Character, Integer>();
        tabble2.put('à', 0);
        tabble2.put('á', 0);
        tabble2.put('â', 0);
        tabble2.put('ã', 0);
        tabble2.put('ä', 0);
        tabble2.put('å', 0);
        tabble2.put('¸', 0);
        tabble2.put('æ', 0);
        tabble2.put('ç', 0);
        tabble2.put('è', 0);
        tabble2.put('é', 0);
        tabble2.put('ê', 0);
        tabble2.put('ë', 0);
        tabble2.put('ì', 0);
        tabble2.put('í', 0);
        tabble2.put('î', 0);
        tabble2.put('ï', 0);
        tabble2.put('ð', 0);
        tabble2.put('ñ', 0);
        tabble2.put('ò', 0);
        tabble2.put('ó', 0);
        tabble2.put('ô', 0);
        tabble2.put('õ', 0);
        tabble2.put('ö', 0);
        tabble2.put('÷', 0);
        tabble2.put('ø', 0);
        tabble2.put('ù', 0);
        tabble2.put('ú', 0);
        tabble2.put('û', 0);
        tabble2.put('ü', 0);
        tabble2.put('ý', 0);
        tabble2.put('þ', 0);
        tabble2.put('ÿ', 0);
		
		try(FileReader reader = new FileReader("code.txt"))
        {
            char symb;
            
            while((c=reader.read())!=-1){
            	symb = (char)c;
            	switch (Character.toLowerCase(symb)) {
            	case 'à':
            		tabble2.replace('à',tabble2.get('à')+1);
            		break;
            	case 'á':
            		tabble2.replace('á',tabble2.get('á')+1);
            		break;
            	case 'â':
            		tabble2.replace('â', tabble2.get('â')+1);
            		break;
            	case 'ã':
            		tabble2.replace('ã', tabble2.get('ã')+1);
            		break;
            	case 'ä':
            		tabble2.replace('ä', tabble2.get('ä')+1);
            		break;
            	case 'å':
            		tabble2.replace('å', tabble2.get('å')+1);
            		break;
            	case '¸':
            		tabble2.replace('¸', tabble2.get('¸')+1);
            		break;
            	case 'æ':
            		tabble2.replace('æ', tabble2.get('æ')+1);
            		break;
            	case 'ç':
            		tabble2.replace('ç', tabble2.get('ç')+1);
            		break;
            	case 'è':
            		tabble2.replace('è', tabble2.get('è')+1);
            		break;
            	case 'é':
            		tabble2.replace('é', tabble2.get('é')+1);
            		break;
            	case 'ê':
            		tabble2.replace('ê', tabble2.get('ê')+1);
            		break;
            	case 'ë':
            		tabble2.replace('ë', tabble2.get('ë')+1);
            		break;
            	case 'ì':
            		tabble2.replace('ì', tabble2.get('ì')+1);
            		break;
            	case 'í':
            		tabble2.replace('í', tabble2.get('í')+1);
            		break;
            	case 'î':
            		tabble2.replace('î', tabble2.get('î')+1);
            		break;
            	case 'ï':
            		tabble2.replace('ï', tabble2.get('ï')+1);
            		break;
            	case 'ð':
            		tabble2.replace('ð', tabble2.get('ð')+1);
            		break;
            	case 'ñ':
            		tabble2.replace('ñ', tabble2.get('ñ')+1);
            		break;
            	case 'ò':
            		tabble2.replace('ò', tabble2.get('ò')+1);
            		break;
            	case 'ó':
            		tabble2.replace('ó', tabble2.get('ó')+1);
            		break;
            	case 'ô':
            		tabble2.replace('ô', tabble2.get('ô')+1);
            		break;
            	case 'õ':
            		tabble2.replace('õ', tabble2.get('õ')+1);
            		break;
            	case 'ö':
            		tabble2.replace('ö', tabble2.get('ö')+1);
            		break;
            	case '÷':
            		tabble2.replace('÷', tabble2.get('÷')+1);
            		break;
            	case 'ø':
            		tabble2.replace('ø', tabble2.get('ø')+1);
            		break;
            	case 'ù':
            		tabble2.replace('ù', tabble2.get('ù')+1);
            		break;
            	case 'ú':
            		tabble2.replace('ú', tabble2.get('ú')+1);
            		break;
            	case 'û':
            		tabble2.replace('û', tabble2.get('û')+1);
            		break;
            	case 'ü':
            		tabble2.replace('ü', tabble2.get('ü')+1);
            		break;
            	case 'ý':
            		tabble2.replace('ý', tabble2.get('ý')+1);
            		break;
            	case 'þ':
            		tabble2.replace('þ', tabble2.get('þ')+1);
            		break;
            	case 'ÿ':
            		tabble2.replace('ÿ', tabble2.get('ÿ')+1);
            		break;
            	default:
            		break;
            	}
            }
            
            System.out.println("  ");
            for(Map.Entry<Character, Integer> item : tabble2.entrySet()){
            	System.out.print(item.getKey());
            	System.out.print("=");
            	System.out.print(item.getValue());
            	System.out.print("  ");
            }
   
            System.out.println("  ");
            toArray(numb1,tabble);
            System.out.println("  ");
            toArray(numb2,tabble2);
            
            int q;
            char b;
            int z=0;
            
            for(int i = 0;i<numb1.length;i++) {
            	for(Map.Entry<Character, Integer> item : tabble.entrySet()){
                q = item.getValue();
                b = item.getKey();
                	if (q==numb1[i]) {
                		alph1[z]=b;
                		z++;
                	}
            	}
            }
            System.out.println(" ");
            z=0;
            for(int i = 0;i<numb2.length;i++) {
            	for(Map.Entry<Character, Integer> item : tabble2.entrySet()){
                q = item.getValue();
                b = item.getKey();
                	if (q==numb2[i]) {
                		alph2[z]=b;
                		z++;
                	}
            	}
            }
            
            
        }
        catch(IOException ex){
            System.out.println(ex.getMessage());
        }
		
		try(FileReader reader = new FileReader("code.txt");
				FileWriter writer = new FileWriter("result.txt");)
        {
			int p;
			int j=0;
			while((p=reader.read())!=-1){
				char symb = (char)p;
				j=0;
				for(int i = 0;i<alph2.length;i++) {
					if (symb==alph2[i]) { 
						writer.write(alph1[i]);
						j=1;
						break;
						}
				}
				if (j==0) writer.write(p);
			}
        }
		catch(IOException ex){
            System.out.println(ex.getMessage());
        }
		
		try(FileReader reader = new FileReader("book.txt"))
        {
			System.out.println("Áèãðàììû âñåãî òåêñòà:");
			String bigramm;
			char ch0 = 0; 
			char ch1;
			while((c=reader.read())!=-1) {
				ch1 = Character.toLowerCase((char)c);
				for(int i = 0;i<alphabet.length;i++) {
					if (ch1==alphabet[i]) {
						for(int j = 0;j<alphabet.length;j++) {
							if (ch0==alphabet[j]) {
								bigramm = new String(new char[] {ch0, ch1});
								big1.replace(bigramm, big1.get(bigramm)+1);
								ch0=ch1;
								break;
							}
						}break;
					}
				}
				ch0=ch1;
			}
			
			for(Map.Entry<String, Integer> item : big1.entrySet()){
				if (item.getValue() != 0) {
					System.out.print(item.getKey());
					System.out.print("=");
					System.out.print(item.getValue());
					System.out.println("  ");
				}
            }
			
        }
		catch(IOException ex){
            System.out.println(ex.getMessage());
        }
		
		try(FileReader reader = new FileReader("result.txt"))
        {
			System.out.println("Áèãðàììû çàøèôðîâàííîãî òåêñòà:");
			String bigramm;
			char ch0 = 0; 
			char ch1;
			while((c=reader.read())!=-1) {
				ch1 = Character.toLowerCase((char)c);
				for(int i = 0;i<alphabet.length;i++) {
					if (ch1==alphabet[i]) {
						for(int j = 0;j<alphabet.length;j++) {
							if (ch0==alphabet[j]) {
								bigramm = new String(new char[] {ch0, ch1});
								big2.replace(bigramm, big2.get(bigramm)+1);
								ch0=ch1;
								break;
							}
						}break;
					}
				}
				ch0=ch1;
			}
			
			for(Map.Entry<String, Integer> item : big2.entrySet()){
				if (item.getValue() != 0) {
					System.out.print(item.getKey());
					System.out.print("=");
					System.out.print(item.getValue());
					System.out.println("  ");
				}
            }
			toArray2(big1,arr_big1);
			toArray2(big2,arr_big2);
			
			int q;
            String b;
            int z=0;
            for(int i = 1088;i>1068;i--) {
            	for(Map.Entry<String, Integer> item : big1.entrySet()){
                q = item.getValue();
                b = item.getKey();
                	if (q==arr_big1[i]) {
                		bgm1[z]=b;
                		System.out.print(b);
                		System.out.print(" ");
                		z++;
                	}
            	}
            }
            System.out.println(" ");
            z=0;
            for(int i = 1088;i>1068;i--) {
            	for(Map.Entry<String, Integer> item : big2.entrySet()){
                q = item.getValue();
                b = item.getKey();
                	if (q==arr_big2[i]) {
                		bgm2[z]=b;
                		System.out.print(b);
                		System.out.print(" ");
                		z++;
                	}
            	}
            }
            
        }
		catch(IOException ex){
            System.out.println(ex.getMessage());
        }
		
		try(FileReader reader = new FileReader("result.txt");
				FileWriter writer = new FileWriter("result_full.txt");)
		{
			String bigramm;
			char ch0 = 0; 
			char ch1;
			int z=0;
			int t,h=0;
			String symb;
			char letter;
			while((c=reader.read())!=-1) {
				ch1 = Character.toLowerCase((char)c);
				bigramm = new String(new char[] {ch0, ch1});
				big3.put(z,bigramm);
				z++;
				ch0=ch1;
			}
			for(Map.Entry<Integer, String> item : big3.entrySet()){
				t=0;
				symb = item.getValue();
				if (h==1) {
				h=0;
				continue;
				}
				for (int i=0;i<bgm2.length;i++) {
					if (symb.equals(bgm2[i])) {
						symb = bgm1[i];
						writer.write(symb);
						t=1;
						h=1;
					}
				}
				if (t==0) {
				letter = symb.charAt(0);
				writer.write(letter);
				}
			}
			
        }
		catch(IOException ex){
            System.out.println(ex.getMessage());
        }
		
    }
	
	static void toArray(int arr[], Map<Character, Integer> map) {
        int index = 0;
        for(Map.Entry<Character, Integer> item : map.entrySet()){
            arr[index] = item.getValue();
            index++;
        }
        Arrays.sort(arr);
    }
	
	static void toArray2( Map<String, Integer> map,int arr[]) {
        int index = 0,new_arr[],k = 1088;
        new_arr = new int[10];
        for(Entry<String, Integer> item : map.entrySet()){
            arr[index] = item.getValue();
            index++;
        }
        Arrays.sort(arr);
        for(int i = 0;i<10;i++) {
            new_arr[i] = arr[k];
            k--;
        }
        arr = new_arr;
    }
	static void bigmap (Map<String, Integer> map) {
		for(char ch0 = 'à'; ch0 <= 'ÿ'; ch0++) {
			for(char ch1 = 'à'; ch1 <= 'ÿ'; ch1++) {
				String bigramm = new String(new char[] {ch0, ch1});
				map.put(bigramm, 0);
			}
		}
		for(char ch0 = 'à'; ch0 <= 'ÿ'; ch0++) {
			String bigramm = new String(new char[] {'¸', ch0});
			map.put(bigramm, 0);
		}
		for(char ch1 = 'à'; ch1 <= 'ÿ'; ch1++) {
			String bigramm = new String(new char[] {ch1, '¸'});
			map.put(bigramm, 0);
		}
		String bigramm = new String(new char[] {'¸', '¸'});
		map.put(bigramm, 0);	
	}
	
}

